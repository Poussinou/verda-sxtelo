== Description ==

The protocol for the Verda Ŝtelo server is built around HTTP so that
it can be accessed from Javascript using XMLHttpRequest. All requests
report the Access-Control-Allow-Origin header so that they can be used
after a cross-domain check.

By default the server listens on port 5142. The ‘official’ server
listens on that port at http://vs.busydoingnothing.co.uk:5142/

== Requests ==

Requests sent to the server should be of the form:

 [GET|POST] /<query_name>?<arg0>&<arg1>&...

The arguments can be escaped with % and a 2 digit hex escape sequence
to encode other characters including the ampersand.

The accepted requests are:

* GET /new_person?<room_name>&<person_name>

This creates a new person in the given ‘room’ with the given name. The
web client always just uses the room ‘default’. The names can use any
valid Unicode characters. The rooms are created on the fly by the
server. Eventually this could be used to play against specific people.
If there is already a game in that room that has not started then the
new person will immediately join that game. Otherwise a new game will
be created. Either way the response will be the same as if the
watch_person request had been called on that new person. The format is
described below.

* GET /watch_person?<person_id>&<last_message>

This can be used to recover from a broken connection and restart
listening to the messages for a particular person. The state of the
game that the person is in will be resent from scratch. There is no
restriction on the number of simultaneous connections that can listen
to a particular person. The messages starting from ‘last_message’ will
be resent.

* GET /start_typing?<person_id>

This should be sent to inform the server when the user starts
typing. The response will be dummy plain text.

* GET /stop_typing?<person_id>

This should be sent to inform the server if the user stops typing
without sending a message. There's no need to send this after a
message is sent because the server automatically assumes the user has
stopped typing. The response will be dummy plain text.

* GET /leave?<person_id>

This should be sent when the user closes the window so that the server
can inform the other players that the person has left. This should
even be sent if the game has not started so that the server can know
the user has given up waiting.

* POST /send_message?<person_id>

This is used to send a message to the conversation. The Content-Type
of the data should be text/plain and it may be in any character
encoding as long as this is specified in the request. If no
content-type header is received the server will assume the data is
text/plain in UTF-8. The message is directly stored in the data for
the request. There is no need to escape HTML characters or any other
special characters. This request can also support the ‘OPTIONS’ method
which some browsers will do as a pre-flight cross-domain security
check.

* GET /move_tile?<person_id>&<tile_num>&<x>&<y>

Requests that the given tile move to the given coordinates. The
response will be a dummy plain text.

* GET /flip_tile?<person_id>&<tile_num>

Requests that the given tile be flipped so that it is facing up. The
first time this command is received the game is also started which
means that no new players will join.

* GET /keep_alive?<person_id>

This should be sent by the client at least every 2.5 minutes if no
ohter request is send. If no request is received after a certain
amount of time the server will assume the client has disconnected and
will remove the player from the game they are in.

== Data response ==

The response to the /watch_person and /new_person requests is a long
series of JSON objects. The server will keep the connection open and
report the response slowly as chunked data until the conversation is
over. Each JSON object is separated by ‘\r\n’. The objects are all a
one- or two-element array where the first element is a string
specifying the name of the command and the second element is the data
for the command. The format of the data depends on the command. The
client should ignore any commands it doesn't understand. The response
is in UTF-8 and is reported as text/plain. The following commands may
be sent:

* "padding"

This command will be sent multiple times at the beginning of the
connection to pad the data out to at least 2KB. This is needed for
XMLHttpRequest on Chrome and Internet Exploiter because it doesn't
call the onreadystatechanged handler until at least that amount of
data has been received. The argument will be a string which should be
ignored.

* "header"

This is the first command sent by the server. The argument is a JSON
hash object describing the person. The object contains the following
string keys:

  "num": This contains a single integer which will be an index to
  specify which person this connection belongs to.

  "id": This is a string containing 16 hexdecimal characters to
  identify this person. This value should be passed as the query
  string to all of the other requests.

* "tile"

This is sent to update the position of a tile. The argument is an
object containing the following keys:

  "num": The tile number. If this is a tile number that the client
  hasn't seen before then it should consider it to be a new tile,
  otherwise it should move an existing tile.

  "x": The new x position of the tile as an integer in pixels.

  "y": The new y position of the tile as an integer in pixels.

  "facing-up": A boolean value to specify whether the tile is facing
  up or down.

  "letter": An integer value representing the Unicode character that
  should be displayed on the top of this tile.

* "message"

A new message has been added to the conversation. The argument is a
javascript hash object containing the following fields:

  "person": This has a number specifying which person send the
  message. Ie, if this matches the "num" sent in the "person_num"
  command then the message was sent by same person, otherwise it was
  sent by one of the other players described in a "person" command.

  "text": This contains the text of the message as a javascript
  string.

* "player-name"

Sends the name of one of the players in the same game. The argument is
a javascript hash object containing the following fields:

  "num": The index number of this player.

  "name": The name chosen for the player in the new_person command.

* "player"

Updates details of one of the players in the same game. The argument
is a javascript hash object containing the following fields:

  "num": The index number of this player.

  "connected": A boolean value which is initially true and switches to
  false once the player sends a leave command.

  "typing": A boolean value to indicate whether the player is
  currently typing a message.

== Timeouts ==

If the server doesn't receive a request from a client after a long
timeout it will act as if the client sent a /leave message. This will
cause the conversation to end. The timeout is somewhere between 5 and
10 minutes.
