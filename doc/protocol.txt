General notes
=============

The protocol is based on the WebSocket protocol. Once a WebSocket
connection is established, each end sends messages that correspond to
WebSocket messages. Each message begins with a single byte
containining the message ID. After that is the payload. The contents
of the payload depends on the message type, as described below. Each
message must be exactly sized to contain the message ID + the payload,
ie, there can be no extra data at the end of the message.

All numbers are in little-endian.

A player in the game is distinct from the network connection. The
intention is that if the connection is dropped then the client can
reconnect and recover without creating a new player. Instead a player
is identified by a 64-bit ID which is randomly generated by the
server. When connecting the client can either request a new player or
it can send this ID in order to continue with a previous player.

Strings are sent as NULL-terminated UTF-8 text.

Messages to the server
======================

The client initiates the communication by sending one of the following
four messages:

NEW_PRIVATE_GAME (0x8c)
-----------------------

• string language_code
• string person_name

Creates a new game without a room name. Another player can join the
game using the JOIN_GAME message with the conversation ID sent by the
server.

JOIN_GAME (0x8d)
----------------

• uint64_t conversation_id
• string person_name

Joins an existing game created with one of the other two messages. The
ID can be acquired via the CONVERSATION_ID message. If the game no
longer exists the server will send a BAD_CONVERSATION_ID message.

NEW_PLAYER (0x80)
-----------------

• string room_name
• string person_name

Creates a new person in the given ‘room’ with the given name. This is
intended to be used to make a game that can be joined by anybody who
knows the room name. The web client always just uses the room
‘default’. This should be sent when the client first starts and hasn't
tried connecting before. The server will create a player ID and send
it in a PLAYER_ID message. The names can use any valid Unicode
characters. The rooms are created on the fly by the server. If there
is already a game in that room that has not started then the new
person will immediately join that game. Otherwise a new game will be
created.

The names can not be longer than 256 bytes.

RECONNECT (0x81)
----------------

• uint64_t player_id
• uint16_t n_messages_received

This should be sent if the connection is dropped in order to resume.
The player_id must be a valid ID given from a previous PLAYER_ID
message from the server. num_messages_received should be the number of
messages that the client successfully received from a previous
connection. The server will continue sending messages from that point
on. Otherwise if the server no longer recognises the player it will
send a BAD_PLAYER_ID message.

KEEP_ALIVE (0x83)
-----------------

• No payload

Some data must be sent by the client at least every minute or the
server will close the connection. If nothing else needs to be sent the
client can send this empty message. No response is sent.

LEAVE (0x84)
------------

• No payload

This should be sent when the user closes the window so that the server
can inform the other players that the person has left. This should
even be sent if the game has not started so that the server can know
the user has given up waiting.

SEND_MESSAGE (0x85)
-------------------

• string text

Send a message to the chat.

Messages that are longer than 1000 bytes will get clipped.

START_TYPING (0x86)
-------------------

• No payload

This should be sent to inform the server when the user starts typing.

STOP_TYPING (0x87)
------------------

• No payload

This should be sent to inform the server if the user stops typing
without sending a message. There’s no need to send this after a
message is sent because the server automatically assumes the user has
stopped typing.

MOVE_TILE (0x88)
----------------

• uint8_t Tile number
• int16_t x
• int16_t y

Requests that the given tile move to the given coordinates.

TURN (0x89)
-----------

• No payload

Requests that a new tile be added to the game. If there are fewer than
the maximum number of tiles in the game already, then this will cause
a new “tile” message to be sent with the position and letter of the
new tile. The current turn will be moved to the next player.

SHOUT (0x8A)
------------

• No payload

When this is sent by the client, everyone in the same game will
receive a “shout” message for the corresponding player number. This
can be used to alert all of the players that this player has found a
word and is about to take it. Any further attempts to shout by anyone
in the same game will be ignored for 10 seconds.

SET_N_TILES (0x8B)
------------------

• uint8_t n_tiles

Sets the number of tiles that will be used for this game. This will
only have any effect if it is called before the game starts. It will
cause a “n_tiles” message to be sent to every player. The value will
be clamped to the range 0 to 122.

Messages to the client
======================

PLAYER_ID (0x00)
----------------

• uint64_t player_id
• uint8_t num

This is sent as the first message whenever NEW_PLAYER or RECONNECT is
sent. “num” is the player number within the game, ie, the first player
to join receives 0, the second 1 and so on.

CONVERSATION_ID (0x0a)
----------------------

• uint64_t id

This is sent for every game no matter how it was created, immediately
after the player ID. The ID can be used to join the game with the
JOIN_GAME message.

MESSAGE (0x01)
--------------

• uint8_t person: This has a number specifying which person sent the
   message. Ie, if this matches the “num” sent in the “person_id”
   command then the message was sent by same person, otherwise it was
   sent by one of the other players described in a “person” command.

• string text

A new message has been added to the conversation.

N_TILES (0x02)
--------------

• uint8_t n_tiles

This will be sent after the PLAYER_ID to specify the number of tiles
that will be used for this game. If any player sends SET_N_TILES
before the game starts it will also be resent. Note that it is not
sent while the game is in progress. The argument is a single integer
specifying the number of tiles.

TILE (0x03)
-----------

• uint8_t num: The tile number. If this is a tile number that the
   client hasn’t seen before then it should consider it to be a new
   tile, otherwise it should move an existing tile.

• int16_t x: The new x position of the tile as an integer in pixels.

• int16_t y: The new y position of the tile as an integer in pixels.

• string letter: A one-character string representing the letter to
   display on this tile.

• uint8_t player: An integer representing the number of the last
   player that moved the tile, or -1 if no-one has moved it yet.

This is sent to update the position of a tile. Initially there will be
no tiles so none of these messages will be sent for a new game. New
tiles are added after a TURN command.

PLAYER_NAME (0x04)
------------------

Sends the name of one of the players in the same game.

• uint8_t num: The index number of this player.

• string name: The name chosen for the player in the new_person command.

PLAYER (0x05)
-------------

Updates details of one of the players in the same game.

• uint8_t num: The index number of this player.

• uint8_t flags: An integer containing a set of flags. These are:
     0: Set if the player is connected
     1: Set if the player is typing
     2: Set if it is this player’s turn

PLAYER_SHOUTED (0x06)
---------------------

Reports that a player in the game has succesfully made a shout.

• uint8_t num: The number of the player that made the shout.

SYNC (0x07)
-----------

This is sent when all of the known state for the game is sent after a
watch_person or new_person request and the server is now waiting for
further state changes before sending any more messages. The client can
use this to start displaying messages when further state changes occur
such as when a new player joins or leaves.

END (0x08)
----------

This is sent when the player has left the game and no more messages
will be sent. The client can use this to detect the difference between
the connection randomly dropping (in which case it should reconnect)
and the server finishing its data.

BAD_PLAYER_ID (0x09)
--------------------

This is sent after a RECONNECT command if the server doesn’t recognise
the player ID.

BAD_CONVERSATION_ID (0x0b)
--------------------------

This is sent after a JOIN_GAME command if the server doesn’t recognise
the conversation ID.

Timeouts
========

If the server doesn’t receive a request from a client after a long
timeout it will act as if the client sent a LEAVE message. This will
cause the conversation to end. The timeout is somewhere between 5 and
10 minutes.
